#
# Platform-specific Makefile definitions for the RISC-V port of Embedded
# Xinu.
#

TEMPLATE_ARCH := riscv

# Architecture root and prefix (ignored if user overrides COMPILER_ROOT from the
# toplevel Makefile).
ARCH_ROOT   :=
ARCH_PREFIX := riscv64-linux-gnu-

# Flaf for producing GDB debug informations.
BUGFLAG     := -gstabs+

# libgcc is needed for a software implementation of integer division, which is
# not included in the ARM instruction set
# LDLIBS		+= -lgcc

# Add a way to test for any RISC-V platform in C code.
DEFS        += -D_XINU_ARCH_RISCV_

# Default build target. For RISC-V we just translate the kernel into a raw binary.
$(BOOTIMAGE): xinu.elf
	$(OBJCOPY) -O binary $^ $@


PLATFORM_NAME := RISC-V 64-bit


# GCC options at https://gcc.gnu.org/onlinedocs/gcc/RISC-V-Options.html
# Extra compiler and assembler flags to specifically target the RISC-V architecture
CFLAGS   += -march=rv64g -fno-stack-protector -mcmodel=medany
ASFLAGS  += -march=rv64g

# Extra compiler flag that disables gcc from generating unaligned memory accesses
CFLAGS	 += -mstrict-align

# Add a define so we can test for RISC-V QEMU Virt in C code if absolutely needed
DEFS     += -D_XINU_PLATFORM_RISCV_QEMU_VIRT

# Embedded Xinu components to build into the kernel image
APPCOMPS :=		#apps	\
			#mailbox \
			#shell   \
			#network \
			#test	 \

# Embedded Xinu device drivers to build into the kernel image
DEVICES  := #uart-pl011      \
#            tty	            \
#            usb             \
#            lan7800	    \
#	    raw		    \
#	    tcp		    \
#	    udp		    \
#           smsc9512        \
#      	    ethloop         \
#            raw             \
#            loopback        \
#            telnet          \
#            framebuffer_rpi \
#            usbkbd          \

